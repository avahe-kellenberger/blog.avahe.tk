<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Avahe&#39;s Blog</title>
    <link>https://blog.avahe.tk/posts/</link>
    <description>Recent content in Posts on Avahe&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 May 2020 22:02:33 -0400</lastBuildDate>
    
	<atom:link href="https://blog.avahe.tk/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>(Neo)vim - Fzf and Ripgrep</title>
      <link>https://blog.avahe.tk/posts/neovim/fzf-ripgrep/</link>
      <pubDate>Sat, 02 May 2020 22:02:33 -0400</pubDate>
      
      <guid>https://blog.avahe.tk/posts/neovim/fzf-ripgrep/</guid>
      <description>Prefer Video? Video form of this blog post
tl;dr / I am an experienced (neo)vim user You may want to use a plugin manager; we are using vim-plug for the tutorial. Install fzf.vim and ripgrep. Configure key mappings for :Files, :GFiles, and :Rg  Functionality We will gain the following functionality from integrating Fzf and Ripgrep into (neo)vim:
Fuzzy searching files (:Files) Fuzzy searching open buffers (:Buffers) Fuzzy searching files tracked by git (:GFiles) Blazing fast textual search with Ripgrep Installation  Installation docs for fzf.</description>
    </item>
    
    <item>
      <title>Setting up Neovim for Typescript - Part 2</title>
      <link>https://blog.avahe.tk/posts/neovim-typescript/part2/</link>
      <pubDate>Tue, 07 Apr 2020 19:04:27 -0400</pubDate>
      
      <guid>https://blog.avahe.tk/posts/neovim-typescript/part2/</guid>
      <description>Topic: Setting up eslint and prettier Part 2 will focus on eslint and prettierjs configuration.
eslint enforces syntax rules, while prettier is more focused on code formatting.
tl;dr / I am an experienced (neo)vim user Install coc-eslint using g:coc_global_extensions
Getting Started coc-eslint In part one we declared a variable named g:coc_global_extensions in our ~/.config/nvim/init.vim file. In order to install this new CoC extension, add &#39;coc-eslint&#39; to the array as shown below.</description>
    </item>
    
    <item>
      <title>Setting up Neovim for Typescript - Part 1</title>
      <link>https://blog.avahe.tk/posts/neovim-typescript/part1/</link>
      <pubDate>Mon, 06 Apr 2020 15:48:45 -0400</pubDate>
      
      <guid>https://blog.avahe.tk/posts/neovim-typescript/part1/</guid>
      <description>Overall Goal of this Guide We will be creating an IDE-like experience with Neovim, specifically for Typescript development.
tl;dr / I am an experienced (neo)vim user You may want to use a plugin manager; we are using vim-plug for the tutorial. Install coc-nvim and coc-tsserver. Copy the defaults in coc-nvim&#39;s README.md  Getting Started vim-plug Installation If you do not already have a plugin manager set up for neovim, give vim-plug a try.</description>
    </item>
    
  </channel>
</rss>