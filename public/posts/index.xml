<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Avahe&#39;s Blog</title>
    <link>https://blog.avahe.tk/posts/</link>
    <description>Recent content in Posts on Avahe&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 May 2020 16:22:13 -0400</lastBuildDate>
    
	<atom:link href="https://blog.avahe.tk/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nimdow - A tiling window manager written in Nim</title>
      <link>https://blog.avahe.tk/posts/nimdow/part1/</link>
      <pubDate>Tue, 12 May 2020 16:22:13 -0400</pubDate>
      
      <guid>https://blog.avahe.tk/posts/nimdow/part1/</guid>
      <description>Nimdow GitHub Link
What is Nim? Nim is an awesome programming language that I&amp;rsquo;ve recently picked up.
An excerpt from the official site:
&amp;ldquo;Efficient, expressive, elegant
Nim is a statically typed compiled systems programming language. It combines successful concepts from mature languages like Python, Ada and Modula.&amp;quot;
It has quickly become my favorite programming language. Nim is very powerful and easy to use.
The Project Nimdow is a tiling window manager (twm) written in Nim.</description>
    </item>
    
    <item>
      <title>(Neo)vim - Editing Remote Files with SSHFS</title>
      <link>https://blog.avahe.tk/posts/neovim/sshfs/</link>
      <pubDate>Mon, 04 May 2020 17:56:17 -0400</pubDate>
      
      <guid>https://blog.avahe.tk/posts/neovim/sshfs/</guid>
      <description>Prefer Video? Video form of this blog post
tl;dr  Install SSHFS via your package manager Create a mount dir (e.g. ~/mysite.com) sshfs -o default_permissions myusername@mysite.com:/ ~/mysite.com  Functionality Using SSHFS, we can mount a remote directory to our local file system and edit files with ease.
 Use our local (neo)vim settings and plugins Explore the remote file system (just like using ssh) Files are updated on the server on file save  The biggest advantage for me is being able to use my local (neo)vim setup.</description>
    </item>
    
    <item>
      <title>(Neo)vim - Fzf and Ripgrep</title>
      <link>https://blog.avahe.tk/posts/neovim/fzf-ripgrep/</link>
      <pubDate>Sat, 02 May 2020 22:02:33 -0400</pubDate>
      
      <guid>https://blog.avahe.tk/posts/neovim/fzf-ripgrep/</guid>
      <description>Prefer Video? Video form of this blog post
tl;dr / I am an experienced (neo)vim user You may want to use a plugin manager; we are using vim-plug for the tutorial. Install fzf.vim and ripgrep. Configure key mappings for :Files, :GFiles, and :Rg  Functionality We will gain the following functionality from integrating Fzf and Ripgrep into (neo)vim:
Fuzzy searching files (:Files) Fuzzy searching open buffers (:Buffers) Fuzzy searching files tracked by git (:GFiles) Blazing fast textual search with Ripgrep Installation  Installation docs for fzf.</description>
    </item>
    
    <item>
      <title>Setting up Neovim for Typescript - Part 2</title>
      <link>https://blog.avahe.tk/posts/neovim-typescript/part2/</link>
      <pubDate>Tue, 07 Apr 2020 19:04:27 -0400</pubDate>
      
      <guid>https://blog.avahe.tk/posts/neovim-typescript/part2/</guid>
      <description>Topic: Setting up eslint and prettier Part 2 will focus on eslint and prettierjs configuration.
eslint enforces syntax rules, while prettier is more focused on code formatting.
tl;dr / I am an experienced (neo)vim user Install coc-eslint using g:coc_global_extensions
Getting Started coc-eslint In part one we declared a variable named g:coc_global_extensions in our ~/.config/nvim/init.vim file. In order to install this new CoC extension, add &#39;coc-eslint&#39; to the array as shown below.</description>
    </item>
    
    <item>
      <title>Setting up Neovim for Typescript - Part 1</title>
      <link>https://blog.avahe.tk/posts/neovim-typescript/part1/</link>
      <pubDate>Mon, 06 Apr 2020 15:48:45 -0400</pubDate>
      
      <guid>https://blog.avahe.tk/posts/neovim-typescript/part1/</guid>
      <description>Overall Goal of this Guide We will be creating an IDE-like experience with Neovim, specifically for Typescript development.
tl;dr / I am an experienced (neo)vim user You may want to use a plugin manager; we are using vim-plug for the tutorial. Install coc-nvim and coc-tsserver. Copy the defaults in coc-nvim&#39;s README.md  Getting Started vim-plug Installation If you do not already have a plugin manager set up for neovim, give vim-plug a try.</description>
    </item>
    
  </channel>
</rss>